package GUIclient;

import GUIserver.GestioneChat;
import java.io.*;
import java.net.*;

public class FrameChat extends javax.swing.JFrame {
    // @HEADER used for the substring the message 
    // @ENDCOMMUNICATION used to end the communication
    private static final int SERVERPORT = 6789;
    private static final String HEADER = "#", ENDCOMMUNICATION = "#FINE#";
    private Socket s;
    private BufferedReader in;
    private DataOutputStream out;
    private ReadThread read;    // read is only started (so its used)
    
    public FrameChat(String username) {   
        // super(username) used to set the frame's title
        super(username);       
        initComponents();
        // the frame is set to visible with the appropiate close operation
        this.setVisible(true);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        
        try {
            // open the stream and connect the socket to server
            s = new Socket(InetAddress.getByName("localhost"), SERVERPORT);
            in = new BufferedReader (new InputStreamReader (s.getInputStream()));
            out = new DataOutputStream(s.getOutputStream()); 
            read = new ReadThread();
            
            // send username to ServerThread
            out.writeBytes(username + '\n');
        }
        catch(Exception ex) {
            ex.toString();
            System.exit(1);
        }     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bttExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaRecive = new javax.swing.JTextArea();
        labelRecive = new javax.swing.JLabel();
        labelSend = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaSend = new javax.swing.JTextArea();
        bttSend = new javax.swing.JButton();
        bttAnnulla = new javax.swing.JButton();
        fieldText = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        userList = new javax.swing.JTextArea();
        labelList = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bttExit.setText("Esci");
        bttExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bttExitMouseClicked(evt);
            }
        });

        areaRecive.setEditable(false);
        areaRecive.setColumns(20);
        areaRecive.setRows(5);
        jScrollPane1.setViewportView(areaRecive);

        labelRecive.setText("Ricevuti");

        labelSend.setText("Inviati");

        areaSend.setEditable(false);
        areaSend.setColumns(20);
        areaSend.setRows(5);
        jScrollPane2.setViewportView(areaSend);

        bttSend.setText("Invia");
        bttSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bttSendMouseClicked(evt);
            }
        });

        bttAnnulla.setText("Annulla");
        bttAnnulla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bttAnnullaMouseClicked(evt);
            }
        });

        userList.setEditable(false);
        userList.setColumns(20);
        userList.setRows(5);
        jScrollPane3.setViewportView(userList);

        labelList.setText("Lista utenti connessi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(bttExit)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelRecive))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(bttAnnulla)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bttSend))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                                .addComponent(fieldText))
                            .addComponent(labelSend))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(labelList, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelRecive, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelSend)
                        .addComponent(labelList)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fieldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttExit)
                    .addComponent(bttSend)
                    .addComponent(bttAnnulla))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bttExitMouseClicked
        // call the method sendMessage(...) to end the communication 
        sendMessage(ENDCOMMUNICATION);
        // the frame is "destroyed"
        dispose();
    }//GEN-LAST:event_bttExitMouseClicked

    private void bttAnnullaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bttAnnullaMouseClicked
        // reset the input field
        fieldText.setText("");
    }//GEN-LAST:event_bttAnnullaMouseClicked

    private void bttSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bttSendMouseClicked
        // its called the method sendMessage with the content of the fieldText as parameter 
        sendMessage(fieldText.getText());
        // reset the input field
        fieldText.setText("");
    }//GEN-LAST:event_bttSendMouseClicked
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaRecive;
    private javax.swing.JTextArea areaSend;
    private javax.swing.JButton bttAnnulla;
    private javax.swing.JButton bttExit;
    private javax.swing.JButton bttSend;
    private javax.swing.JTextField fieldText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelList;
    private javax.swing.JLabel labelRecive;
    private javax.swing.JLabel labelSend;
    private javax.swing.JTextArea userList;
    // End of variables declaration//GEN-END:variables

    // sendMessage is called in bttSendMouseClicked to send the message to the server
    private void sendMessage(String mex) {
        try {
            // the areaSend is updated with the new message
            areaSend.setText(areaSend.getText() + mex + '\n');
            // the message is sended to the server
            out.writeBytes(mex + '\n');
        }
        catch (Exception ex) {
            ex.toString();
        }
    }
    
    public class ReadThread extends Thread {
        String s = "";
    
        public ReadThread() {
            start();
        }

        @Override
        public void run() {
            try {
                for(;;) {
                   // the message from the serve is contain in s
                   s = in.readLine();
                   // check if the message is a user list update 
                   if(s.contains("list" + HEADER)) {
                       String[] subString = s.split(HEADER);
                       userList.setText(subString[1]);
                   }  
                   else areaRecive.setText(areaRecive.getText() + '\n' + s);    // if it isn't an user list update the message is added in the areaRecive
                }
            }
            catch (Exception ex) {
                ex.toString();
            }
        }
    }
}